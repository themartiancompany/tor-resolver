#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_host=""
  addresses_amount=""
  onion_addresses=()
  color=""
  quiet=""
}

_requirements() {
  true
}

_tor_resolver() {
  local \
    _command="${1}" \
    _host="${2}" \
    _results="${3}" \
    _addresses=()
    _args=()
  shift \
    3
  _addresses=(
    "$@"
  )
  if [[ "${_command}" == "get" ]]; then
    _args+=(
      "${_results}"
    )
  elif [[ "${_command}" == "set" ]]; then
    _args+=(
      "${_addresses[@]}"
    )
  fi
  "_${_command}_addresses" \
    "${_host}" \
    "${_args[@]}"
}

_set_addresses() {
  local \
    _conf="" \
    _addresses=()
  _addresses=(
    "$@"
  )
  _conf="$( \
    _get_conf_path)"
  mkdir \
    -p \
    "$(dirname \
         "${_conf}")"
  echo \
    "onion_addresses=(${_addresses[*]})" > \
    "${_conf}"
}

_get_addresses() {
  local \
    _host="${1}" \
    _amount="${2}" \
    _addresses=() \
    _selection=() \
    _results=() \
    _shuf_opts=() \
    _no_cfg_msg=() \
    _available \
    _conf \
    _result
  _shuf_opts=(
    -n
      "${_amount}"
  )
  _no_cfg_msg=(
    "no configuration known"
    "for ${_host}; run"
      "'tor-resolver"
        "set ${_host}"
        "<host_name>.onion'"
    "to set one"
  )
  _conf="$( \
    _get_conf_path)"
  if \
    [ ! -e  "${_conf}" ]; then
    _msg_error \
      "${_no_cfg_msg[*]}" \
      1
  fi
  _check_conf \
    "${_conf}"
  _addresses=( $( \
    source \
      "${_conf}" && \
      echo \
        "${onion_addresses[@]}")
  )
  _available="${#_addresses}"
  if [[ "${_available}" == "0" ]]; then
    _msg_error \
      "No addresses configured for ${_host}" \
      1
  fi
  _shuf_opts+=(
    -i
      "1-${_available}"
  )
  _selection=( $( \
    shuf \
      "${_shuf_opts[@]}")
  )
  for _result \
    in "${_selection[@]}"; do
    _results+=(
      "${_addresses[${_result}]}"
    )
  done
  echo \
    "${_results[@]}"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "target" \
      "host").cfg"
  echo \
    "${_conf}"
}

_set_overrides() {
  _set_override \
    "addresses" \
    "amount" \
    "1"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an host onion addresses
usage:
  $(_get "app" "name")
    [options]
    <command>
    <host>
    (<address>)
  commands:
     get                  Get address for an host
     set                  Set address for an host
     update               Ask host for a new set of addresses
  options:
     -n <results>         Amount of addresses to return
                          Default: '$(_get "addresses" "amount")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _resolve_date
  TZ=UTC \
    printf \
      -v _resolve_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "_resolve" "date")"
  _msg_info "              Target host:   $(_get "target" "host")"
  _msg_info "      Addresses to return:   $(_get "addresses" "amount")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'n:cvh?' \
    arg; do
  case \
    "${arg}" in
    n) override_addresses_amount="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 2 )) && \
  _msg_error \
    "no command given" \
    0 && \
  _set_overrides && \
  _usage \
    1
(( $# < 2 )) && \
  _msg_error \
    "no host given" \
    0 && \
  _set_overrides && \
  _usage \
    1
_set \
  "target" \
  "command" \
  "${1}"
_set \
  "target" \
  "host" \
  "${2}"
shift \
  2
onion_addresses=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
_tor_resolver \
  "$( \
    _get \
      "target" \
      "command")" \
  "$( \
    _get \
      "target" \
      "host")" \
  "$( \
    _get \
      "addresses" \
      "amount")" \
  "${onion_addresses[@]}"

# vim:set sw=2 sts=-1 et:
